---
description: TypeScript rules and standards for the Mozzy project
globs: ["**/*.ts", "**/*.tsx"]
---

# Mozzy Project TypeScript Rules

## Memory Management

All TypeScript rules must be considered in the context of the project's memory management system:

1. Working Memory:

   - Active type changes are tracked in `/docs/working-memory/open/{task-id}/`
   - Type changes must be documented in task plans
   - Type updates require documentation review
   - See `/docs/features/core-processing/README.md` for current processing types
   - See `/docs/features/podcast/README.md` for podcast-specific types
   - See `/docs/features/posts/README.md` for post-specific types

2. Project Memory:

   - Type system architecture is documented in `/docs/technical/types/`
   - Breaking changes are tracked in `/docs/changes/types/`
   - Type patterns are recorded in `/docs/patterns/types/`
   - See `/docs/features/core-processing/architecture.md` for core type architecture
   - See `/docs/features/podcast/architecture.md` for podcast type architecture
   - See `/docs/features/posts/architecture.md` for post type architecture

3. Documentation Memory:
   - Type templates are stored in `/docs/templates/types/`
   - Common type patterns are documented
   - Type system evolution is tracked
   - See `/docs/features/core-processing/validation.md` for validation patterns
   - See `/docs/features/core-processing/api.md` for API type usage

## Use TypeScript for Type Safety

Mozzy enforces strict type checking across the codebase:

1. Always enable strict mode in tsconfig.
2. Utilize TypeScript's inference whenever possible.
3. Avoid the "any" type unless strictly necessary.

## Code Standards - Type Documentation

```typescript
/**
 * Clear description of the type's purpose and context.
 * Include any important notes about usage or constraints.
 */
export interface ExampleType {
  /** Description with value range if applicable (e.g., 0-1) */
  numericField: number;
  /** Description of what this field represents */
  stringField: string;
  /** Object field description */
  objectField: {
    /** Nested field description */
    nestedField: string;
  };
}
```

### Type Documentation Rules

- Every exported type must have a JSDoc comment explaining its purpose.
- Each field must have an inline JSDoc comment.
- Document optional fields and their implications.
- Include numeric ranges (e.g., 0-1, 0-100).
- Explain relationships with other types.
- Document any default values.
- Include usage examples for complex types.

## Type System Enforcement

### Type Declaration Rules

1. Location:

   - All types MUST be declared in /app/types/.
   - No type declarations allowed outside /app/types/.
   - UI component prop types are the ONLY exception (they stay within their component files).

2. Directory Structure:

   ```
   /app/types/
   ‚îú‚îÄ‚îÄ index.ts              # Main type exports
   ‚îú‚îÄ‚îÄ entities/             # Entity types
   ‚îú‚îÄ‚îÄ processing/           # Processing types
   ‚îú‚îÄ‚îÄ shared/               # Shared types
   ‚îú‚îÄ‚îÄ ui/                   # UI-specific types
   ‚îî‚îÄ‚îÄ logging/              # Logging types
   ```

3. Import Rules:

   - Always import from the main `index.ts` in /app/types.
   - Example: import type { MyType } from "@/app/types"
   - Do not import directly from subdirectories (exception: internal imports within /types).

4. Enforcement:

   - Pre-commit hook checks for type declarations outside /app/types.
   - Pre-commit hook checks for improper type imports.
   - TypeScript type checking is enforced on commit.
   - Run .husky/type-check manually to verify compliance.

5. Documentation:

   - All type changes must be documented with the required JSDoc format.
   - Update type system docs when adding new categories or introducing breaking changes.
   - Keep type exports in index.ts organized by category.

6. Exceptions:
   - UI component prop types remain in the component file if they are only used there.
   - Test-specific types may remain in test files.
   - Generated types from external tools are allowed in their own directories.

## Working Memory Integration

### Task Documentation Requirements

Every task involving types must include:

1. Type Impact Analysis:

   ```markdown
   ## Type System Impact

   - New types added: [list]
   - Modified types: [list]
   - Breaking changes: [yes/no]
   - Migration required: [yes/no]
   ```

2. Documentation Updates:

   ```markdown
   ## Documentation Updates

   - [ ] Type documentation updated
   - [ ] Breaking changes documented
   - [ ] Migration guide added (if needed)
   - [ ] Examples updated
   ```

3. Review Requirements:

   ```markdown
   ## Type Review

   - [ ] Type consistency verified
   - [ ] Import paths checked
   - [ ] Documentation complete
   - [ ] Tests updated
   ```

### Progress Tracking

Track type system changes in updates.md:

```markdown
### YYYY-MM-DD HH:mm - Type System Update

- ‚úì Types Added: List new types
- üîÑ Types Modified: List changes
- üìö Docs Updated: List documentation changes
- ‚ö†Ô∏è Breaking Changes: List breaking changes
```

## Type System Impact

- Modified types:

  - PodcastProcessingChunk (added required progress field)
  - ProcessingStep (fixed inheritance)
  - ProcessingState (fixed chunk types)
  - ProcessingChunkResult (fixed inheritance and fields)
  - ProcessingResult (fixed entity types)
  - PodcastProcessingStep (fixed inheritance)

- Breaking changes: yes
- Migration required: yes

## Documentation Updates

- [x] Type documentation updated with JSDoc comments
- [x] Breaking changes documented
- [ ] Migration guide needed for ProcessingChunk progress field
- [x] Examples updated in type definitions

## Type Review

- [x] Type consistency verified
- [x] Import paths checked
- [x] Documentation complete
- [ ] Tests need updating for new type requirements

## Completion Strategy (Revised Implementation Approach)

### 2025-01-24 11:15

1. Establish a Stable Baseline

   - Temporarily freeze work on all but the highest-priority fixes.
   - Revert or comment-out non-critical in-progress changes that introduce complexity.
   - Ensure the baseline compiles, even if some functionality must be temporarily disabled.
   - (1a) Temporarily disable or comment out unit tests for experimental code while focusing on core functionality.
   - (1b) Document which features are deferred so we can reintroduce them later without confusion.

2. Fix Blocking Issues in Small Batches

   - Refer to .cursorrules for surgical edits only.
   - Group TypeScript errors by component or module.
   - Address one batch at a time and run "tsc --noEmit" to confirm all errors in that batch are resolved before moving on.
   - (2a) Maintain a short list of critical errors; tackle them in priority order.
   - (2b) After fixing each batch, compile and run partial tests to confirm no new regressions.

3. Align Entities, Interfaces, and Mocks

   - For each interface, ensure all required fields are present and documented.
   - Update mocks in parallel so tests won't break.
   - Verify that entity validation schemas match the updated interfaces.
   - (3a) Create a quick reference table for new/modified entity fields.
   - (3b) Ensure all JSDoc comments follow the .cursorrules format and numeric field ranges are documented where applicable.

4. Validate Imports and Exports

   - According to the .cursorrules, verify each file references /app/types or local prop types correctly.
   - Eliminate any leftover or duplicate declarations.
   - Update references in mock files or utilities to avoid reintroducing errors.
   - (4a) Use editor search to locate "import ... from '@/app/types/processing/podcast/types'" and ensure correct usage.
   - (4b) Consolidate or remove any older duplicated definitions, verifying no required fields get lost.

5. Perform Full Type Check and Lint

   - After each batch is fixed, re-run "tsc --noEmit" across the entire codebase.
   - Perform a final "eslint --fix" pass when type errors reach zero for a given batch.
   - Document changes in updates.md after each successful pass.
   - (5a) Keep an incremental log of which errors were fixed in each batch for clarity.
   - (5b) Validate code formatting and commit changes right after verifying a clean build.

6. Final Integration and Documentation

   - Unfreeze any disabled features and re-introduce them gradually, verifying type consistency.
   - Update the plan and progress logs (updates.md) to reflect resolved errors.
   - Provide a short migration guide if any external dependencies or app consumers need to adapt to the final type changes.
   - (6a) Retest any reintroduced features using a dedicated partial test suite before merging to main branch.
   - (6b) Link new or updated docs in the final commit message for easy cross-referencing.

7. TSC Log Detailed Steps

   - ‚úì (7a) Replace all references to `BaseProcessingResult` with `ProcessingResult` in test files
     (e.g. `PodcastProcessingAdapter.test.ts`, `PostProcessingAdapter.test.ts`) and code that previously imported `BaseProcessingResult` from "@/app/types/processing..." or "@/app/types/processing/base".
   - (7b) Provide required fields (e.g., `id`, `createdAt`, `updatedAt`, `expertise`, etc.) in `PersonEntity`, `OrganizationEntity`, `LocationEntity`, `EventEntity`, and others used in `anthropicActions.ts` so they satisfy the stricter type definitions.
   - (7c) Fix "no exported member 'SentimentAnalysis'" by ensuring the actual exports match the import references, or remove/replace the usage if `SentimentAnalysis` is deprecated.
   - (7d) Correct function calls that pass the wrong number of arguments (e.g., "Expected 0 arguments, but got 1") by aligning them with updated function signatures. Use partial testing to verify each fix.
   - (7e) Restore or properly rename missing exports such as `podcastEntitiesSchema`, `ExtendedTheme`, `PodcastAnalysis`, and any sibling types in `podcastActions.ts`, `analysis.ts`, or other schema files.
   - (7f) Adjust newly required fields (`format`, `progress`, `keyPoints`, etc.) in `ProcessingResult`, `ProcessingChunk`, and mock data so they conform to the updated interfaces. For instance, code referencing `ProcessingResult` without a `format` property must now include it, or use partial mocks for tests.
   - (7g) Update references to `SidebarMenu`, `SidebarMenuItem`, etc., ensuring that the sidebar components are exported consistently (case-sensitive paths in Next.js). The .cursorrules specify verifying imports for correct capitalization to avoid conflicts.
   - (7h) For entity array mismatches (e.g., `PersonEntity[]` not assignable to the expected shape), confirm each entity's required fields (like `size`, `relevance`, or `examples`) are present in the interface and mock data. (Use small commits so you can verify each fix.)
   - (7i) Fix incorrectly extended or inherited interfaces (e.g., `PodcastProcessingStep` missing `data` or `chunks` not matching `ProcessingChunk`). Where needed, unify them in `/app/types/base` or `/app/types/podcast` according to project guidelines in .cursorrules.
   - (7j) Remove or rename references to `ComparisonBlock`, `PodcastProcessingAnalysis`, `ProcessingStatus`, `NetworkLogData`, or other types that were moved or deprecated. Aim for minimal changes in line with .cursorrules to avoid reintroducing collisions.

## Current Status

### 2025-01-24 13:59

**Status**: In Progress

**What's working**:

- Base processing types are properly defined
- Podcast processing types are being consolidated
- Old podcast.ts file has been removed
- Constants have been separated into their own file
- Fixed type exports in podcast/types.ts
- Fixed base type imports and exports
- Fixed entity type compatibility in podcast/types.ts
- Updated BaseProcessingResult references to ProcessingResult in all test files
- Fixed ProcessingStatus imports
- Fixed constructor argument mismatches in test files
- Fixed ProcessingPipeline constructor calls

**What's not**:

- Missing required fields in mock data
- Import path issues in multiple files
- Missing exports in processing/base.ts
- Missing required fields in entity types
- Incorrect type extensions in podcast/types.ts
- Missing progress fields in several interfaces

**Next actions**:

1. Add required fields to entity types (part of 7b)
2. Fix type extensions in podcast/types.ts (part of 7i)
3. Add missing progress fields to interfaces (part of 7f)
4. Update mock data to include required fields (part of 7f)
5. Fix import paths (part of 7c)

## Progress History

### 2025-01-24 13:59 - Constructor Argument Fixes Complete

‚úì **Completed**:

- Fixed constructor argument mismatches in PodcastProcessingAdapter tests
- Fixed ProcessingPipeline constructor calls to use TextChunkingStrategy
- Updated all test files to match actual implementation
- Removed unnecessary processor instantiation in tests

ü§î **Decisions**:

- Use TextChunkingStrategy from core processing strategies
- Keep processor instantiation inside PodcastProcessingAdapter
- Maintain consistent adapter initialization across test files

‚ùå **Issues**:

- None for this update

‚è≠Ô∏è **Next Steps**:

1. Add required fields to entity types (7b)
2. Fix type extensions in podcast/types.ts (7i)
3. Add missing progress fields (7f)

[Previous history preserved...]
